<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/websocket
        http://www.springframework.org/schema/websocket/spring-websocket-4.1.xsd">

	<!-- #5. appServlet관련 설정: servlet-context에 대한 설정으로
	하나의 어플리케이션당 하나 이상일 수 있다. -->
	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- /src/main/webapp/resources폴더: 
	image, css, js, 기타파일에 대한 경로
	사용자 요청 /resources/** 있을 경우, 
	해당 디렉토리에서 처리함. -->
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	

	<!-- #15.1 jsonView Bean 및 viewResolver 등록 -->
	<!-- 요청한 viewName과 실제bean이름을 매핑해주는 BeanNameViewResolver를 사용함. -->
    <!-- bean아이디는 viewResolver로 반드시 지정. 처리순서를 1로 우선처리되도록함. -->
    <beans:bean id="viewResolver" 
    	        class="org.springframework.web.servlet.view.BeanNameViewResolver">
        <beans:property name="order" value="1"/>
    </beans:bean>   
	<beans:bean id="jsonView" class="net.sf.json.spring.web.servlet.view.JsonView"/>
	
	
    <!-- #16.1 @Responsebody사용을 위한 의존 : 빈등록 (스프링 5.x.x => MappingJackson2HttpMessageConverter) -->
	<beans:bean id="jacksonMessageConverter" 
				class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter" />


	<beans:bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<beans:property name="messageConverters">
			<beans:list>
				<beans:ref bean="jacksonMessageConverter"/>
                <beans:bean class="org.springframework.http.converter.ByteArrayHttpMessageConverter" />
			</beans:list>
		</beans:property>
	</beans:bean>
	

	
	<!-- 스프링컨테이너에 빈(bean)객체를 등록
	해당패키지 및에 있는 java파일중에 
	@Component 어노테이션이 붙은 클래스는 
	빈으로 등록함. 기본적으로 싱글톤패턴 관리. -->
	<context:component-scan base-package="com.kh.showticket" />
	
	
	<beans:bean id="echoHandler" class="com.kh.showticket.alarm.EchoHandler" />
	<websocket:handlers>
		<websocket:mapping handler="echoHandler" path="/echo" />
	        <websocket:handshake-interceptors>
				<beans:bean class="org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor" />
			</websocket:handshake-interceptors>
		<websocket:sockjs />
	</websocket:handlers>

	<!-- #10.로깅을 위한 interceptor등록 -->
	<!-- DispatcherServlet이 Controller를 호출하는 중간에 intercept한다. -->
	<!-- 그래서 이 설정은 web.xml의 DispatcherServlet의 servlet-context.xml에 있다. -->
	<interceptors>
		<interceptor>
			<mapping path="/member/reservation.do"/>
			<mapping path="/member/memberView.do"/>
			<mapping path="/member/myCoupon.do"/>
			<mapping path="/member/myPoint.do"/>
			<mapping path="/member/myStandBy.do"/>
			<mapping path="/member/myInterest.do"/>
			<beans:bean id="loginInterceptor" 
						class="com.kh.showticket.common.interceptor.LoginInterceptor"/>			
		</interceptor>
	</interceptors>
	
	<!-- #13.1 파일업로드를 처리할 Resolver클래스 빈등록(빈이름 주의) -->
	<beans:bean id="multipartResolver" 
				class="org.springframework.web.multipart.commons.CommonsMultipartResolver">   
		<beans:property name="maxUploadSize" value="10485760" /> <!-- max 파일용량은 10MB이다. -->
	</beans:bean>
	
	
	<!-- 회원수정 메일 인증 -->
	<beans:bean id="mailSender"	class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<beans:property name="host" value="smtp.gmail.com" />
		<beans:property name="port" value="587" /><!-- 465 or 25 -->
		<beans:property name="username" value="showticket77@gmail.com" />
		<beans:property name="password" value="#showt!cket1234" />
		<beans:property name="defaultEncoding" value="utf-8" />
		<beans:property name="javaMailProperties">
			<beans:props>
				<beans:prop key="mail.transport.protocol">smtp</beans:prop>
				<beans:prop key="mail.smtp.auth">true</beans:prop>
				<beans:prop key="mail.smtp.starttls.enable">true</beans:prop>
				<beans:prop key="mail.debug">true</beans:prop>
			</beans:props>
		</beans:property>
	</beans:bean>
	

	
	
</beans:beans>
